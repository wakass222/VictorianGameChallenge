<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>lastMouse_y = 0;
ySpeed = 0;
frictionDrag = 5;

grabbed = false;
grabTime = 0;
grabDecay = 20000

maxSpeed = 100;
minSpeed = 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(point_in_rectangle(mouse_x, mouse_y, 0, global.bannerSize, view_wview[0], view_hview[0] - global.optionBoxSize) &amp;&amp; mouse_check_button_pressed(mb_left) &amp;&amp; !global.newMessage.transition) {
    grabbed = true;
    lastMouse_y = mouse_y
    ydragStart = mouse_y;
    show_debug_message("Registered");
}

if(abs(ySpeed) &gt; abs(frictionDrag)) {
    ySpeed -= frictionDrag * sign(ySpeed);
} else {
    ySpeed = 0;
}

if(grabbed &amp;&amp; mouse_check_button(mb_left)) {
    grabTime += delta_time;
    ySpeed = mouse_y - lastMouse_y;
    
    lastMouse_y = mouse_y;
}

if(grabbed &amp;&amp; mouse_check_button_released(mb_left)) {
    grabbed = false;
    
    grabTime /= grabDecay;
    
    ySpeed = (mouse_y - ydragStart) * (1/grabTime);
    
    if(abs(ySpeed) &gt; maxSpeed) {
        ySpeed = sign(ySpeed) * maxSpeed;
    }
    
    if(abs(ySpeed) &lt; minSpeed) {
        ySpeed = 0;
    }
}
/*
if(global.newMessage.y &gt; global.optionBoxSize) {

    var distanceToMove = global.newMessage.y - (view_hview[0] - global.optionBoxSize)

    with(obj_messagePlayer) {
        y += distanceToMove;
    }
    
    with(obj_messageOther) {
        y += distanceToMove;
    }
    ySpeed = 0;
}

var optionPos = view_hview[0] - global.optionBoxSize
if(y + other.ySpeed + box_height &gt; optionPos) {
    other.ySpeed = y - optionPos;
} 
*/

if(global.firstMessage != -1) {
    with(global.firstMessage) {
    
        var yStop = global.bannerSize + global.padding;
        //Make globals consistent:font
        if(y + other.ySpeed &lt; yStop) {
        distanceToBanner = (global.bannerSize + global.padding) - y;
        scr_changeMessageYPos(distanceToBanner);
        
        other.ySpeed = 0;
        }
    }
}
if(global.newMessage != -1) {
    with(global.newMessage) {
        //var bottom_y = y + box_height;
        var yStop = global.yTextSpawn - box_height - global.padding * 4;
        //if(bottom_y + other.ySpeed &gt; global.optionBoxStart) {
        if(y + other.ySpeed &gt; yStop) {
            distanceToOption = yStop - y;
            scr_changeMessageYPos(distanceToOption);
            
            other.ySpeed = 0;
        }
    }
}

scr_changeMessageYPos(ySpeed);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
